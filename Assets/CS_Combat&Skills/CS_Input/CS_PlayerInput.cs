//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/CS_Combat&Skills/CS_Input/CS_PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CS_PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CS_PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CS_PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerGroundMovement"",
            ""id"": ""77f80cb5-db77-41dc-9f8f-401707812e61"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c3745b0f-8a87-416b-9742-1a35a3668766"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""89a806ab-f263-43a0-b346-1b4aed34f85d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""273c3d54-35dd-4354-873f-666bb172d640"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5474176-4278-4bf0-9f13-b7fd1f0cda93"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QAbility"",
                    ""type"": ""Button"",
                    ""id"": ""13ca05a8-01cc-4de7-9bc6-013e39a98637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EAbility"",
                    ""type"": ""Button"",
                    ""id"": ""b91b5e28-5ff1-4d73-a67b-aa902bf0517d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FAbility"",
                    ""type"": ""Button"",
                    ""id"": ""9facac3f-019c-4d0b-a330-ad515cf81b16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""37a21632-aa78-4e43-856a-7d649c9145f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""be5289ec-33a1-469a-9890-99209d2432f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""Value"",
                    ""id"": ""7b738db3-aca5-4d17-87b9-b8b0d4101a93"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b4bcbfb5-d31a-42ae-9cfd-958747b410fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""9fca975a-772c-4da6-899d-2ddece2fd105"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""View"",
                    ""type"": ""PassThrough"",
                    ""id"": ""80ace6bc-4d5d-4874-87a0-1a4ff46dd0d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ec3aeb02-afc2-47ba-b17c-2dd0cb5237bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""38421a3f-fc24-42ad-8e2d-df567aa89aa2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a83a4ac8-93cb-4cc5-8f4a-63745c197038"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""90f6f310-0c10-4d3d-b48f-66674f4a1590"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b4adcefb-6cc5-42cd-94bc-a0f8d25c0084"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""50491491-42a4-4c3b-a486-3e7820dc54f1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4077376a-63fa-4cda-b3db-d62632fea9cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0610f9a5-8428-440c-b1cf-1af2e724a068"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30b99b24-6b98-41c2-90bc-eed52cff42d1"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""090119f6-3b31-4a7f-a27e-f80b195ddb12"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""QAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23291323-fb2c-4b2d-b5d1-0a6b15270242"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""EAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""889f1ca3-6de3-4e5e-b413-64b5f55bbfc4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""FAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0718aab-4ee2-46a0-a379-de228e7d387d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f6fe7b2-7dce-4d17-acaa-4e05bf09a943"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa14aff5-6499-467d-97c6-3198cdb0ebe9"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1512ddab-c68f-47d3-a562-c0fbb00bcc51"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad886d1-c35e-44ef-a2f2-c810ab223d5a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc4c1301-344e-46aa-b78a-136e8282b802"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""219e1cdd-bd0b-4862-b4f1-504f571a2434"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""b7fdba76-8a7c-44c6-bdc4-7ec94c54a6e6"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""c6385954-deec-40e4-b01c-81977acbbef0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""edb13fde-f312-45b5-8077-241e8dc0014c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34bbcb01-3a55-4de1-922d-9c618e3814a8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f1d5541-deae-40c6-b410-08d8f0d5e14f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerDroneMovement"",
            ""id"": ""2ad44cdb-a220-4bcd-b2cb-f93397b74990"",
            ""actions"": [
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c20ad389-e0da-448c-b47b-acc039f2172c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""38cd8285-dea4-4b11-a9e9-6d3b3b849dd7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3bfe0017-2251-45b6-8fcd-9896c459009f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AltitudeControl"",
                    ""type"": ""Value"",
                    ""id"": ""ff1a6dcc-14c4-48d5-9e39-add050a71c20"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Unequip"",
                    ""type"": ""Button"",
                    ""id"": ""ebcb0083-18ff-4451-ab09-3185a813fc11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f7405b25-56d4-456b-8749-5c6c6299d7e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e47741d7-9fb9-47c7-a521-e93e0514053f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83b85b74-7195-4644-ac08-bdf16b6a4d11"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""636b30a1-b9ad-42e2-9903-7030a8bbcb12"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f702773d-285c-49d3-bc62-7b8b1b80c077"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5f280c73-d87c-4f33-b09b-3261ba365a5c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9aeb607-ef9d-45dc-88d0-e2055c5e8e69"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""505784a6-2d3f-4194-a204-49b4ff61d0a0"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Height"",
                    ""id"": ""ae0b8e03-ccca-444e-8013-991a359882e2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""AltitudeControl"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0da82807-cd26-4db4-892b-52c4e6e004e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""AltitudeControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a05043d0-a307-4d6a-bfa3-1b4a202af5d0"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""AltitudeControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2ede31ed-3173-4a07-be8d-aa7d80de8f14"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Unequip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3759d477-d8f3-4626-b7d4-d353cdc4f2db"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerGroundMovement
        m_PlayerGroundMovement = asset.FindActionMap("PlayerGroundMovement", throwIfNotFound: true);
        m_PlayerGroundMovement_Movement = m_PlayerGroundMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerGroundMovement_Jump = m_PlayerGroundMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerGroundMovement_MouseX = m_PlayerGroundMovement.FindAction("MouseX", throwIfNotFound: true);
        m_PlayerGroundMovement_MouseY = m_PlayerGroundMovement.FindAction("MouseY", throwIfNotFound: true);
        m_PlayerGroundMovement_QAbility = m_PlayerGroundMovement.FindAction("QAbility", throwIfNotFound: true);
        m_PlayerGroundMovement_EAbility = m_PlayerGroundMovement.FindAction("EAbility", throwIfNotFound: true);
        m_PlayerGroundMovement_FAbility = m_PlayerGroundMovement.FindAction("FAbility", throwIfNotFound: true);
        m_PlayerGroundMovement_LeftClick = m_PlayerGroundMovement.FindAction("LeftClick", throwIfNotFound: true);
        m_PlayerGroundMovement_RightClick = m_PlayerGroundMovement.FindAction("RightClick", throwIfNotFound: true);
        m_PlayerGroundMovement_ScrollWheel = m_PlayerGroundMovement.FindAction("ScrollWheel", throwIfNotFound: true);
        m_PlayerGroundMovement_Reload = m_PlayerGroundMovement.FindAction("Reload", throwIfNotFound: true);
        m_PlayerGroundMovement_MousePos = m_PlayerGroundMovement.FindAction("MousePos", throwIfNotFound: true);
        m_PlayerGroundMovement_View = m_PlayerGroundMovement.FindAction("View", throwIfNotFound: true);
        m_PlayerGroundMovement_Pause = m_PlayerGroundMovement.FindAction("Pause", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_MousePos = m_UI.FindAction("MousePos", throwIfNotFound: true);
        m_UI_Unpause = m_UI.FindAction("Unpause", throwIfNotFound: true);
        // PlayerDroneMovement
        m_PlayerDroneMovement = asset.FindActionMap("PlayerDroneMovement", throwIfNotFound: true);
        m_PlayerDroneMovement_MouseY = m_PlayerDroneMovement.FindAction("MouseY", throwIfNotFound: true);
        m_PlayerDroneMovement_MouseX = m_PlayerDroneMovement.FindAction("MouseX", throwIfNotFound: true);
        m_PlayerDroneMovement_Movement = m_PlayerDroneMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerDroneMovement_AltitudeControl = m_PlayerDroneMovement.FindAction("AltitudeControl", throwIfNotFound: true);
        m_PlayerDroneMovement_Unequip = m_PlayerDroneMovement.FindAction("Unequip", throwIfNotFound: true);
        m_PlayerDroneMovement_View = m_PlayerDroneMovement.FindAction("View", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGroundMovement
    private readonly InputActionMap m_PlayerGroundMovement;
    private IPlayerGroundMovementActions m_PlayerGroundMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerGroundMovement_Movement;
    private readonly InputAction m_PlayerGroundMovement_Jump;
    private readonly InputAction m_PlayerGroundMovement_MouseX;
    private readonly InputAction m_PlayerGroundMovement_MouseY;
    private readonly InputAction m_PlayerGroundMovement_QAbility;
    private readonly InputAction m_PlayerGroundMovement_EAbility;
    private readonly InputAction m_PlayerGroundMovement_FAbility;
    private readonly InputAction m_PlayerGroundMovement_LeftClick;
    private readonly InputAction m_PlayerGroundMovement_RightClick;
    private readonly InputAction m_PlayerGroundMovement_ScrollWheel;
    private readonly InputAction m_PlayerGroundMovement_Reload;
    private readonly InputAction m_PlayerGroundMovement_MousePos;
    private readonly InputAction m_PlayerGroundMovement_View;
    private readonly InputAction m_PlayerGroundMovement_Pause;
    public struct PlayerGroundMovementActions
    {
        private @CS_PlayerInput m_Wrapper;
        public PlayerGroundMovementActions(@CS_PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerGroundMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerGroundMovement_Jump;
        public InputAction @MouseX => m_Wrapper.m_PlayerGroundMovement_MouseX;
        public InputAction @MouseY => m_Wrapper.m_PlayerGroundMovement_MouseY;
        public InputAction @QAbility => m_Wrapper.m_PlayerGroundMovement_QAbility;
        public InputAction @EAbility => m_Wrapper.m_PlayerGroundMovement_EAbility;
        public InputAction @FAbility => m_Wrapper.m_PlayerGroundMovement_FAbility;
        public InputAction @LeftClick => m_Wrapper.m_PlayerGroundMovement_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_PlayerGroundMovement_RightClick;
        public InputAction @ScrollWheel => m_Wrapper.m_PlayerGroundMovement_ScrollWheel;
        public InputAction @Reload => m_Wrapper.m_PlayerGroundMovement_Reload;
        public InputAction @MousePos => m_Wrapper.m_PlayerGroundMovement_MousePos;
        public InputAction @View => m_Wrapper.m_PlayerGroundMovement_View;
        public InputAction @Pause => m_Wrapper.m_PlayerGroundMovement_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGroundMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGroundMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGroundMovementActions instance)
        {
            if (m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnJump;
                @MouseX.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMouseY;
                @QAbility.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnQAbility;
                @QAbility.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnQAbility;
                @QAbility.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnQAbility;
                @EAbility.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnEAbility;
                @EAbility.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnEAbility;
                @EAbility.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnEAbility;
                @FAbility.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnFAbility;
                @FAbility.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnFAbility;
                @FAbility.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnFAbility;
                @LeftClick.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnRightClick;
                @ScrollWheel.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnScrollWheel;
                @Reload.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnReload;
                @MousePos.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnMousePos;
                @View.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnView;
                @View.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnView;
                @View.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnView;
                @Pause.started -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PlayerGroundMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
                @QAbility.started += instance.OnQAbility;
                @QAbility.performed += instance.OnQAbility;
                @QAbility.canceled += instance.OnQAbility;
                @EAbility.started += instance.OnEAbility;
                @EAbility.performed += instance.OnEAbility;
                @EAbility.canceled += instance.OnEAbility;
                @FAbility.started += instance.OnFAbility;
                @FAbility.performed += instance.OnFAbility;
                @FAbility.canceled += instance.OnFAbility;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @View.started += instance.OnView;
                @View.performed += instance.OnView;
                @View.canceled += instance.OnView;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PlayerGroundMovementActions @PlayerGroundMovement => new PlayerGroundMovementActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_MousePos;
    private readonly InputAction m_UI_Unpause;
    public struct UIActions
    {
        private @CS_PlayerInput m_Wrapper;
        public UIActions(@CS_PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePos => m_Wrapper.m_UI_MousePos;
        public InputAction @Unpause => m_Wrapper.m_UI_Unpause;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @MousePos.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMousePos;
                @Unpause.started -= m_Wrapper.m_UIActionsCallbackInterface.OnUnpause;
                @Unpause.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnUnpause;
                @Unpause.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnUnpause;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @Unpause.started += instance.OnUnpause;
                @Unpause.performed += instance.OnUnpause;
                @Unpause.canceled += instance.OnUnpause;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // PlayerDroneMovement
    private readonly InputActionMap m_PlayerDroneMovement;
    private IPlayerDroneMovementActions m_PlayerDroneMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerDroneMovement_MouseY;
    private readonly InputAction m_PlayerDroneMovement_MouseX;
    private readonly InputAction m_PlayerDroneMovement_Movement;
    private readonly InputAction m_PlayerDroneMovement_AltitudeControl;
    private readonly InputAction m_PlayerDroneMovement_Unequip;
    private readonly InputAction m_PlayerDroneMovement_View;
    public struct PlayerDroneMovementActions
    {
        private @CS_PlayerInput m_Wrapper;
        public PlayerDroneMovementActions(@CS_PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseY => m_Wrapper.m_PlayerDroneMovement_MouseY;
        public InputAction @MouseX => m_Wrapper.m_PlayerDroneMovement_MouseX;
        public InputAction @Movement => m_Wrapper.m_PlayerDroneMovement_Movement;
        public InputAction @AltitudeControl => m_Wrapper.m_PlayerDroneMovement_AltitudeControl;
        public InputAction @Unequip => m_Wrapper.m_PlayerDroneMovement_Unequip;
        public InputAction @View => m_Wrapper.m_PlayerDroneMovement_View;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDroneMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDroneMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerDroneMovementActions instance)
        {
            if (m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface != null)
            {
                @MouseY.started -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMouseY;
                @MouseX.started -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMouseX;
                @Movement.started -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnMovement;
                @AltitudeControl.started -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnAltitudeControl;
                @AltitudeControl.performed -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnAltitudeControl;
                @AltitudeControl.canceled -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnAltitudeControl;
                @Unequip.started -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnUnequip;
                @Unequip.performed -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnUnequip;
                @Unequip.canceled -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnUnequip;
                @View.started -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnView;
                @View.performed -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnView;
                @View.canceled -= m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface.OnView;
            }
            m_Wrapper.m_PlayerDroneMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @AltitudeControl.started += instance.OnAltitudeControl;
                @AltitudeControl.performed += instance.OnAltitudeControl;
                @AltitudeControl.canceled += instance.OnAltitudeControl;
                @Unequip.started += instance.OnUnequip;
                @Unequip.performed += instance.OnUnequip;
                @Unequip.canceled += instance.OnUnequip;
                @View.started += instance.OnView;
                @View.performed += instance.OnView;
                @View.canceled += instance.OnView;
            }
        }
    }
    public PlayerDroneMovementActions @PlayerDroneMovement => new PlayerDroneMovementActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IPlayerGroundMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
        void OnQAbility(InputAction.CallbackContext context);
        void OnEAbility(InputAction.CallbackContext context);
        void OnFAbility(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnMousePos(InputAction.CallbackContext context);
        void OnUnpause(InputAction.CallbackContext context);
    }
    public interface IPlayerDroneMovementActions
    {
        void OnMouseY(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnAltitudeControl(InputAction.CallbackContext context);
        void OnUnequip(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
    }
}
